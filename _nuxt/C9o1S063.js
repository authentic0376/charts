const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./DS-IiJE9.js","./BtJWWB7g.js","./COBHd9is.js","./CfQNJ9ne.js"])))=>i.map(i=>d[i]);
import{k as m,I as P,J as A,K as z,f as V,h as X,m as C,L as F,c as y,i as O,M as L,N as H,O as b,o as N,_ as k}from"./COBHd9is.js";import{u as q}from"./CfQNJ9ne.js";const I=800,T=300,M=.5,h=2*M,p=6,W=1/100,S=.1,R=5.1,Q=.8,j=.4,K=.2,J=30,Z=20,ee=7,x=l=>{if(l===0)return 1;const o=Math.PI*l;return Math.sin(o)/o};function G(){const l=m(I/2),o=m(I),e=P({timeVector:[],originalSignal:[],sampledTimePoints:[],sampledValues:[],reconstructedSignal:[],samplingFrequency:h,nyquistFrequency:h,isAliasing:!1}),c=()=>{const s=Math.max(0,Math.min(o.value,l.value))/o.value,i=S+s*(R-S);return Math.max(S,Math.min(R,i))},r=()=>{const s=[],i=[];for(let n=0;n<=p;n+=W)s.push(n),i.push(Math.sin(2*Math.PI*M*n));e.timeVector=s,e.originalSignal=i,console.log("Nyquist Frequency:",h,"Hz")},_=()=>{const s=e.samplingFrequency;if(s<=0){e.sampledTimePoints=[],e.sampledValues=[],e.reconstructedSignal=new Array(e.timeVector.length).fill(0),e.isAliasing=s<h;return}const i=1/s,n=[],u=[];for(let t=0;t<=p+i/2&&!(t>p&&n.length>0&&n[n.length-1]>=p);t+=i){const d=Math.min(t,p);if(!(n.length>0&&Math.abs(d-n[n.length-1])<1e-9)&&(n.push(d),u.push(Math.sin(2*Math.PI*M*d)),n.length>1e3))break}e.sampledTimePoints=n,e.sampledValues=u;const a=new Array(e.timeVector.length).fill(0);if(n.length>0)for(let t=0;t<n.length;t++){const d=n[t],w=u[t];for(let f=0;f<e.timeVector.length;f++){const E=e.timeVector[f];a[f]+=w*x(s*(E-d))}}e.reconstructedSignal=a,e.isAliasing=s<h};A(l,()=>{e.samplingFrequency=c()},{immediate:!0}),A(()=>e.samplingFrequency,()=>{_()},{immediate:!0}),r();const g=s=>{l.value=s},v=s=>{o.value=s,e.samplingFrequency=c()};return{state:z(e),setMouseX:g,setCanvasWidth:v}}const U={key:0,class:"loading-overlay"},Y=V({__name:"shannon_sampling_theorem",setup(l){const o=m(null),e=m(!1),c=m(I),r=m(T),_=G(),g=X(()=>({..._.state,canvasWidth:c.value,canvasHeight:r.value})),{isInitialized:v,resizeRenderer:s}=q(o,c,r,g,()=>b(()=>import("./DS-IiJE9.js"),__vite__mapDeps([0,1,2,3]),import.meta.url).then(a=>a.P5ShannonRenderer),"P5ShannonRenderer"),i=a=>{if(o.value){e.value=!0;const t=o.value.getBoundingClientRect(),d=a.clientX-t.left;_.setMouseX(d)}},n=()=>{e.value=!1},u=()=>{if(o.value&&typeof window<"u"){const a=o.value.offsetWidth,t=T;a>0&&t>0&&(a!==c.value||t!==r.value)&&(console.log(`Window resized, updating canvas to ${a}x${t}`),c.value=a,r.value=t,_.setCanvasWidth(a),s(a,t))}};return C(()=>{typeof window<"u"&&(window.addEventListener("resize",u),u())}),F(()=>{typeof window<"u"&&window.removeEventListener("resize",u)}),(a,t)=>(N(),y("div",{ref_key:"canvasContainerRef",ref:o,class:"shannon-canvas-container",style:H({width:`${c.value}px`,height:`${r.value}px`,cursor:"ew-resize",margin:"auto",position:"relative"}),onMousemove:i,onMouseleave:n},[L(v)?O("",!0):(N(),y("div",U," Loading Shannon Sampling Visualization... "))],36))}}),$=k(Y,[["__scopeId","data-v-95eb8bd0"]]),ne=Object.freeze(Object.defineProperty({__proto__:null,default:$},Symbol.toStringTag,{value:"Module"}));export{J as A,I as S,p as T,T as a,Z as b,K as c,Q as d,j as e,ee as f,ne as s};
